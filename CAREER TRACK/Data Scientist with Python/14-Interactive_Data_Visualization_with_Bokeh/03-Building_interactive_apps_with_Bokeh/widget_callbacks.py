# Updating plots from dropdowns
import pandas as pd
import numpy as np

# Import figure from bokeh.plotting
from bokeh.plotting import figure, ColumnDataSource

# Import output_file and show from bokeh.io
from bokeh.io import output_notebook, show, curdoc

# import the HoverTool
from bokeh.models import HoverTool, CategoricalColorMapper, CDSView, GroupFilter, Slider, Select, Button, CheckboxGroup, RadioGroup, Toggle

from bokeh.layouts import row, column, gridplot, widgetbox

from bokeh.models.widgets import Tabs, Panel

x = np.linspace(0.3, 10, num=300)
y = [-0.19056796,  0.13314778,  0.39032789,  0.58490071,  0.72755027,0.82941604,  0.90008145,  0.94719898,  0.97667411,  0.99299073,  0.99952869,  0.99882928,  0.99280334,  0.98288947,  0.97017273,  0.95547297,  0.93941048,  0.92245495,  0.90496191,  0.88720012,  0.86937208,  0.85162961,  0.83408561,  0.81682308,  0.79990193,  0.78336433,  0.76723876,  0.75154314,  0.7362873 ,  0.72147487,  0.70710477,  0.69317237,  0.67967038,  0.66658956,  0.65391928,  0.64164796,  0.62976339,  0.61825301,  0.60710407,  0.59630386,  0.58583975,  0.57569933,  0.56587047,  0.55634135,  0.5471005 ,  0.53813683,  0.52943965,  0.52099866,  0.51280394,  0.50484599,  0.49711569,  0.48960429,  0.48230342,  0.47520507,  0.46830157,  0.4615856 ,  0.45505012,  0.44868845,  0.44249417,  0.43646114,  0.43058352,  0.42485569,  0.4192723 ,  0.41382821,  0.40851854,  0.40333859,  0.39828387,  0.39335008,  0.38853312,  0.38382904,  0.37923407,  0.37474459,  0.37035715,  0.36606841,  0.3618752 ,  0.35777446,  0.35376325,  0.34983877,  0.34599831,  0.34223928,  0.33855919,  0.33495564,  0.33142632,  0.32796903,  0.32458163,  0.32126208,  0.3180084 ,  0.3148187 ,  0.31169115,  0.30862399,  0.30561552,  0.30266411,  0.29976818,  0.29692621,  0.29413673,  0.29139834,  0.28870966,  0.28606938,  0.28347622,  0.28092895,  0.27842639,  0.27596739,  0.27355084,  0.27117567,  0.26884083,  0.26654532,  0.26428818,  0.26206846,  0.25988525,  0.25773767,  0.25562487,  0.25354602,  0.25150031,  0.24948698,  0.24750527,  0.24555444,  0.24363379,  0.24174264,  0.23988032,  0.23804617,  0.23623958,  0.23445993,  0.23270663,  0.2309791 ,  0.2292768 ,  0.22759917,  0.22594568,  0.22431583,  0.22270912,  0.22112506,  0.21956318,  0.21802302,  0.21650414,  0.2150061 ,  0.21352848,  0.21207087,  0.21063286,  0.20921408,  0.20781413,  0.20643266,  0.20506929,  0.20372368,  0.20239549,  0.20108438,  0.19979003,  0.19851212,  0.19725034,  0.19600439,  0.19477398,  0.19355882,  0.19235862,  0.19117313,  0.19000206,  0.18884517,  0.18770219,  0.18657288,  0.18545699,  0.1843543 ,  0.18326456,  0.18218756,  0.18112306,  0.18007087,  0.17903076,  0.17800253,  0.17698598,  0.17598091,  0.17498713,  0.17400446,  0.1730327 ,  0.17207168,  0.17112122,  0.17018115,  0.1692513 ,  0.16833151,  0.16742161,  0.16652145,  0.16563087,  0.16474972,  0.16387786,  0.16301513,  0.16216139,  0.16131651,  0.16048035,  0.15965278,  0.15883366,  0.15802286,  0.15722027,  0.15642575,  0.15563919,  0.15486047,  0.15408947,  0.15332608,  0.15257018,  0.15182167,  0.15108044,  0.15034639,  0.14961941,  0.14889939,  0.14818625,  0.14747988,  0.14678019,  0.14608708,  0.14540046,  0.14472024,  0.14404634,  0.14337866,  0.14271712,  0.14206163,  0.14141212,  0.1407685 ,  0.14013069,  0.13949862,  0.1388722 ,  0.13825137,  0.13763605,  0.13702616,  0.13642163,  0.1358224 ,  0.13522839,  0.13463954,  0.13405578,  0.13347705,  0.13290327,  0.1323344 ,  0.13177035,  0.13121109,  0.13065653,  0.13010663,  0.12956133,  0.12902056,  0.12848428,  0.12795242,  0.12742494,  0.12690177,  0.12638288,  0.12586819,  0.12535768,  0.12485127,  0.12434893,  0.12385061,  0.12335625,  0.12286581,  0.12237925,  0.12189652,  0.12141757,  0.12094236,  0.12047084,  0.12000298,  0.11953873,  0.11907805,  0.1186209 ,  0.11816724,  0.11771703,  0.11727022,  0.11682679,  0.11638669,  0.11594988,  0.11551634,  0.11508601,  0.11465888,  0.11423489,  0.11381403,  0.11339624,  0.11298151,  0.11256979,  0.11216106,  0.11175527,  0.11135241,  0.11095243,  0.11055531,  0.11016102,  0.10976953,  0.1093808 ,  0.10899481,  0.10861153,  0.10823093,  0.10785298,  0.10747766,  0.10710493,  0.10673478,  0.10636717,  0.10600208,  0.10563948,  0.10527936,  0.10492167,  0.1045664 ,  0.10421352,  0.10386302,  0.10351486,  0.10316902,  0.10282548,  0.10248422,  0.10214521,  0.10180843,  0.10147386,  0.10114148,  0.10081127,  0.1004832 ,  0.10015726,  0.09983342]

# Create slider
slider = Slider(title='scale',start=1,end=10,step=1,value=1)

# Create a new plot: plot
plot = figure()

# Create ColumnDataSource: source
source = ColumnDataSource(data={'x':x,'y':y})

# Add a line to the plot
plot.line('x', 'y', source=source)

# Define a callback function: callback
def callback(attr, old, new):

    # Read the current value of the slider: scale
    scale = slider.value

    # Compute the updated y using np.sin(scale/x): new_y
    new_y = np.sin(scale/x)

    # Update source with the new data values
    source.data = {'x': x, 'y': new_y}

# Attach the callback to the 'value' property of slider
slider.on_change('value',callback)

# Create layout and add to current document
layout = column(widgetbox(slider), plot)
curdoc().add_root(layout)